set nocompatible

execute pathogen#infect()
call pathogen#helptags()

set modeline
set encoding=utf8
set ffs=unix,dos,mac
set path=.,,**

let mapleader = ","
let g:mapleader = ","

map <leader>g :GundoToggle<CR>

let g:pyflakes_use_quickfix=0
let g:pep8_map='<leader>8'

au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType="context"

"nmap <leader>w :w!<cr>

"Turn highlighting on.  i have seen both on and enable so...
syntax enable
syntax on

"enable mouse usage.  I may eventually want to detect gui for this.
set mouse=a

"abbreviation of messages
set shortmess+=filmnrxoOtT

"This is supposedly better for unix/win compat
set viewoptions=folds,options,cursor,unix,slash

"spell checking on
set spell


"Additional local backups
set backup
set backupdir=$home/vimfiles/backup/files
set directory=$home/vimfiles/backup/swap
set viewdir=$home/vimfiles/backup/views

au BufWinLeave \* silent! mkview 
au BufWinEnter \* silent! loadview

"Display the current mode
set showmode
set cursorline
set ruler
set showcmd
set linespace=0
set nu
set incsearch

"Highlight problematic whitespace
set list
set listchars=tab:>.,trail:.,extends:\#,nbsp:. 


colorscheme desert
set background=dark

if has("gui_running")
	set guioptions-=T
	set guioptions+=@
	set t_Co=256
	set guitablabel=%M\ %t
endif

"auto detection of file types
filetype plugin indent on

map <leader>td <Plug>TaskList


"autocmd FileType c,cpp,java,php,js,python,twig,xml,yml
"autocmd
"BufWritePre <buffer> :call

set autoread
set history=1700

set foldenable
set foldmethod=indent
set foldlevel=99
set foldnestmax=3

set so=7
set wildmenu
set wildignore=*.0,*~,*.pyc
set wildmode=list:longest,full

set ruler
set cmdheight=2
set hid

set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase
set smartcase
set hlsearch
set lazyredraw

set magic
set showmatch
set mat=2

set noerrorbells
set novisualbell
set t_vb=
set tm=500

set autoindent
set smartindent
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set softtabstop=4

set lbr
set tw=500


vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

map j gj
map k gk

"map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>
"
" " Close all the buffers
map <leader>ba :1,1000 bd!<cr>
"
" " Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove



" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" " Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" " Specify the behavior when switching between buffers 
try
  set switchbuf=useopen,usetab,newtab
    set stal=2
    catch
    endtry


     " Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

" Remember info about open buffers on close
set viminfo^=%

""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" " Always show the status line
 set laststatus=2
"
" " Format the status line
 set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l
"
"
"
" " Format the status line
 set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l
"
"
 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " => Editing mappings
 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " Remap VIM 0 to first non-blank character
 map 0 ^
"
" " Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
 nmap <M-j> mz:m+<cr>`z
 nmap <M-k> mz:m-2<cr>`z
 vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
 vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
"
 if has("mac") || has("macunix")
   nmap <D-j> <M-j>
     nmap <D-k> <M-k>
       vmap <D-j> <M-j>
         vmap <D-k> <M-k>
         endif

         " Delete trailing white space on save, useful for Python and CoffeeScript ;)
         func! DeleteTrailingWS()
           exe "normal mz"
             %s/\s\+$//ge
               exe "normal `z"
               endfunc
               autocmd BufWrite *.py :call DeleteTrailingWS()
               autocmd BufWrite *.coffee :call DeleteTrailingWS()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgrep searching and cope displaying
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you vimgrep after the selected text
 vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
 map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Vimgreps in the current file
map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>
" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>
" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction
function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"
    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif
    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction


"tab stuff
set switchbuf=usetab
nnoremap <F8> :sbnext<CR>
nnoremap <S-F8> :sbprevious<CR>
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
nnoremap <silent> <A-Left> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <A-Right> :execute 'silent! tabmove ' . tabpagenr()<CR>
"Python specific


